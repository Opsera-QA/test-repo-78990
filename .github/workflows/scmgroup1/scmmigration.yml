name: CI/CD Pipeline

on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - develop
      - main

jobs:
  build-job:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup environment variables
        run: echo "FAIL_STAGE=$FAIL_STAGE" >> $GITHUB_ENV && echo "NO_FAIL=$NO_FAIL" >> $GITHUB_ENV
      - name: Build
        run: |
          echo "Compiling the code..."
          RANDOM_NUMBER=$RANDOM
          echo $RANDOM_NUMBER
          echo $FAIL_STAGE
          echo $NO_FAIL
          if [ $(( RANDOM_NUMBER % 2 )) -eq 0 ] || [ "$FAIL_STAGE" == 'build' ] || [ "$NO_FAIL" == 'true' ]; then
            exit 1
          fi
          echo "Compile complete."
        env:
          FAIL_STAGE: ${{ secrets.FAIL_STAGE }}
          NO_FAIL: ${{ secrets.NO_FAIL }}
    continue-on-error: true

  unit-test-job:
    runs-on: ubuntu-latest
    needs: build-job
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Run unit tests
        run: |
          echo "Running unit tests... This will take about 60 seconds."
          sleep 10
          echo $FAIL_STAGE
          echo "Code coverage is 90%"
        env:
          FAIL_STAGE: ${{ secrets.FAIL_STAGE }}

  lint-test-job:
    runs-on: ubuntu-latest
    needs: build-job
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Lint code
        run: |
          echo "Linting code... This will take about 10 seconds."
          sleep 5
          echo $FAIL_STAGE
          echo "No lint issues found."
        env:
          FAIL_STAGE: ${{ secrets.FAIL_STAGE }}

  mock-job-1:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Mock stage 1
        run: echo "Mock stage 1 Completed"

  dast-job-1:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: DAST stage 1
        run: |
          sleep 10
          echo "DAST stage 1 Completed"

  sast-job-1:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: SAST stage 1
        run: |
          sleep 15
          if [ $RANDOM_NUMBER%6 == 0 ] || [ "$FAIL_STAGE" == 'sast' ] || [ "$NO_FAIL" == 'true' ]; then
            exit 1
          fi
          echo "SAST stage 1 Completed"
        env:
          RANDOM_NUMBER: ${{ steps.build-job.outputs.RANDOM_NUMBER }}
          FAIL_STAGE: ${{ secrets.FAIL_STAGE }}
          NO_FAIL: ${{ secrets.NO_FAIL }}

  deploy-e1:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Deploy to dev
        run: |
          echo "Deploying application in dev"
          echo "Application successfully deployed in dev"
    env:
      FAIL_STAGE: ${{ secrets.FAIL_STAGE }}

  deploy-prod:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to prod
        run: |
          echo "Deploying application to prod..."
          if [ "$FAIL_STAGE" == 'deploy' ]; then
            exit 1
          fi
          echo "Application successfully deployed to prod."
    env:
      FAIL_STAGE: ${{ secrets.FAIL_STAGE }}

  child-pipeline:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Trigger child pipeline
        run: |
          echo "Triggering child pipeline..."
          # Note: GitHub Actions does not support direct child pipeline triggers. Implement alternative solutions such as using API calls.
